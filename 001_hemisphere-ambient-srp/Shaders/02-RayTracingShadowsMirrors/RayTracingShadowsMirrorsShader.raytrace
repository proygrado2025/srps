#include "UnityShaderVariables.cginc"

#pragma max_recursion_depth 20

// Input
RaytracingAccelerationStructure g_SceneAccelStruct;
float g_Zoom; //Mathf.Tan(Mathf.Deg2Rad * Camera.main.fieldOfView * 0.5f)
TextureCube<float4> g_CubeMap;
SamplerState sampler_linear_repeat;
float3 _debugFloat3;
float _debugFloat;

// Output
RWTexture2D<float4> g_Output;

#include "RayPayload.hlsl"

// miss shader 1??
[shader("miss")]
void MainMissShader(inout RayPayload payload : SV_RayPayload)
{
	payload.color = g_CubeMap.SampleLevel(sampler_linear_repeat, WorldRayDirection(), 0);
}

// miss shader 0??
[shader("miss")]
void MainMissShader2_Shadow(inout RayPayloadShadow payload : SV_RayPayload)
{
    // The ray "hit" the light.
    payload.shadowValue = 1; 
}

[shader("raygeneration")]
void MainRayGenShader()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    float2 frameCoord = float2(launchIndex.x, launchDim.y - launchIndex.y - 1) + float2(0.5, 0.5);

    float2 ndcCoords = frameCoord / float2(launchDim.x - 1, launchDim.y - 1);

    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    float aspectRatio = (float)launchDim.x / (float)launchDim.y;

    float3 viewDirection = normalize(float3(ndcCoords.x * aspectRatio, ndcCoords.y, 1));

    // Rotate the ray from view space to world space.
    float3 rayDirection = normalize(mul((float3x3)unity_CameraToWorld, viewDirection));

    RayDesc ray;
    ray.Origin    = _WorldSpaceCameraPos;
    ray.Direction = rayDirection;
    ray.TMin      = 0.0f;
    ray.TMax      = 1e20f;

    RayPayload payload;
    payload.color = float4(1, 1, 1, 1);
    payload.bounceIndex = 0;

    uint missShaderIndex = 1;
    TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 0, missShaderIndex, ray, payload);

    float4 finalColor = payload.color;

    g_Output[frameCoord] = finalColor;
}